apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'

apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "gustavo.guterres.leite.tcc"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 6
        versionName "1.2.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        debug {
            resValue "string", "app_name", "[DEBUG] Nosso Dinheiro (Aluno)"
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "Nosso Dinheiro (Aluno)"
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

ext {
    koin_version = '1.0.2'
    room_version = '2.1.0'
    firebase_version = '17.0.0'
}

configurations {
    ktlint
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more *
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def excludes = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/Manifest*.*',
                        'android/**/*.*',
                        '**/BuildConfig.*',
                        '**/*$ViewBinder*.*',
                        '**/*$ViewInjector*.*',
                        '**/Lambda$*.class',
                        '**/Lambda.class',
                        '**/*Lambda.class',
                        '**/*Lambda*.class'
                ]

                classDirectories = fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: excludes
                ) + fileTree(
                        dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}",
                        excludes: excludes
                )

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'

    //Dependency Injection
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    implementation "org.koin:koin-android-scope:$koin_version"

    //Rx
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"

    //Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //Gson
    implementation 'com.google.code.gson:gson:2.8.5'

    //Firebase
    implementation "com.google.firebase:firebase-core:17.2.1"
    implementation "com.google.firebase:firebase-auth:19.1.0"
    implementation "com.google.firebase:firebase-database:19.2.0"

    //Dots Indicator
    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:4.1.2'

    //Lottie animations
    implementation 'com.airbnb.android:lottie:3.2.0'

    //Lint
    ktlint "com.pinterest:ktlint:0.35.0"
    //Unit Test
    testImplementation 'junit:junit:4.12'
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "org.robolectric:robolectric:4.3"
    testImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.google.gms.google-services'